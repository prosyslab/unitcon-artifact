issue		# 23:import {issue, issueCommand} from './command'
issueCommand
os
path
InputOptions	# 31:export interface InputOptions {
required
ExitCode
Success
Failure
exportVariable	# 60:export function exportVariable(name: string, val: string): void {
name
val
process
env
name
val
issueCommand
name
val
setSecret	# 69:export function setSecret(secret: string): void {
secret
issueCommand
secret
addPath		# 77:export function addPath(inputPath: string): void {
inputPath
issueCommand
inputPath
process
env
inputPath
path
delimiter
process
env
getInput	# 89:export function getInput(name: string, options?: InputOptions): string {
name
options
InputOptions
val
process
env
name
replace
toUpperCase
options
options
required
val
Error
name
val
trim
setOutput	# 105:export function setOutput(name: string, value: string): void {
name
value
issueCommand
name
value
setFailed	# 118:export function setFailed(message: string): void {
message
process
exitCode
ExitCode
Failure
error
message
debug
message
issueCommand
message
error
message
issue
message
warning
message
issue
message
info
message
process
stdout
write
message
os
EOL
startGroup
name
issue
name
endGroup
issue
group		# 185:export async function group<T>(name: string, fn: () => Promise<T>): Promise<T> {
T
name
fn
Promise
T
Promise
T
startGroup
name
result
T
result
fn
endGroup
result
saveState
name
value
issueCommand
name
value
getState	# 219:export function getState(name: string): string {
name
process
env
name
foo
