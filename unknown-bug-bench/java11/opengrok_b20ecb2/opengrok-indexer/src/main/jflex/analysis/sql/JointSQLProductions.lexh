/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
 * Copyright (c) 2012, 2018 Oracle and/or its affiliates. All rights reserved.
 * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
 */

/*
 *     Number and Identifier must be defined in the specific SQL dialect's .lexh
 * file. Otherwise, JointSQL.lexh has the definitions shared among dialects.
 *     The subclass must override getDialectKeywords() to return the appropriate
 * Set for the dialect.
 */

%state STRING QUOTED_IDENTIFIER SINGLE_LINE_COMMENT BRACKETED_COMMENT

%%

<YYINITIAL> {
    {Identifier} {
        chkLOC();
        if (offerSymbol(yytext(), 0, false) && returnOnSymbol()) {
            return yystate();
        }
    }

    {Number} {
        chkLOC();
        onDisjointSpanChanged(HtmlConsts.NUMBER_CLASS, yychar);
        offer(yytext());
        onDisjointSpanChanged(null, yychar);
    }

    [nN]? "'"    {
        chkLOC();
        String capture = yytext();
        String prefix = capture.substring(0, capture.length() - 1);
        String rest = capture.substring(prefix.length());
        offer(prefix);
        yypush(STRING);
        onDisjointSpanChanged(HtmlConsts.STRING_CLASS, yychar);
        offer(rest);
    }

    \"    {
        chkLOC();
        yypush(QUOTED_IDENTIFIER);
        onDisjointSpanChanged(HtmlConsts.STRING_CLASS, yychar);
        offer(yytext());
    }

    "--"    {
        yypush(SINGLE_LINE_COMMENT);
        onDisjointSpanChanged(HtmlConsts.COMMENT_CLASS, yychar);
        offer(yytext());
    }
}

<STRING> {
    "''"    {
        chkLOC();
        offer(yytext());
    }
    "'"    {
        chkLOC();
        offer(yytext());
        yypop();
    }
}

<QUOTED_IDENTIFIER> {
    \"\"    {
        chkLOC();
        offer(yytext());
    }
    \"    {
        chkLOC();
        offer(yytext());
        yypop();
    }
}

<SINGLE_LINE_COMMENT> {
    {WhspChar}*{EOL} {
        yypop();
        onEndOfLineMatched(yytext(), yychar);
    }
}

<YYINITIAL, BRACKETED_COMMENT> {
    "/*" {
        if (commentLevel++ == 0) {
            yypush(BRACKETED_COMMENT);
            onDisjointSpanChanged(HtmlConsts.COMMENT_CLASS, yychar);
        }
        offer(yytext());
    }
}

<BRACKETED_COMMENT> {
    "*/" {
        offer(yytext());
        if (--commentLevel == 0) {
            yypop();
        }
    }
}

<YYINITIAL, STRING, QUOTED_IDENTIFIER, SINGLE_LINE_COMMENT, BRACKETED_COMMENT> {
    {WhspChar}*{EOL}    {
        onEndOfLineMatched(yytext(), yychar);
    }
    [[\s]--[\n]]    {
        offer(yytext());
    }
    [^\n]    {
        chkLOC();
        offer(yytext());
    }
}

<STRING> {
    {BrowseableURI}    {
        chkLOC();
        if (takeAllContent()) {
            onUriMatched(yytext(), yychar, SQLUtils.STRINGLITERAL_APOS_DELIMITER);
        }
    }
}

<QUOTED_IDENTIFIER, SINGLE_LINE_COMMENT> {
    {BrowseableURI}    {
        chkLOC();
        if (takeAllContent()) {
            onUriMatched(yytext(), yychar);
        }
    }
}

<BRACKETED_COMMENT> {
    {BrowseableURI}    {
        if (takeAllContent()) {
            onUriMatched(yytext(), yychar, StringUtils.END_C_COMMENT);
        }
    }
}
